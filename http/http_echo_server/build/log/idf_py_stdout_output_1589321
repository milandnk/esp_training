[1/10] Performing build step for 'bootloader'
[1/1] cd "/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/build/bootloader/esp-idf/esptool_py" && /home/dnk120/.espressif/python_env/idf5.4_py3.10_env/bin/python /home/dnk120/esp/esp-idf-release-v5.3/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /home/dnk120/Desktop/milan/trainning/esp32/esp\ trainning/http/http_echo_server/build/bootloader/bootloader.bin
Bootloader binary size 0x5510 bytes. 0x2af0 bytes (34%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/main/main.c: In function 'echo_post_handler':
/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/main/main.c:78:5: warning: pointer 'content' used after 'free' [-Wuse-after-free]
   78 |     handle_incoming_json(content, ret);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/main/main.c:76:5: note: call to 'free' here
   76 |     free(content); // Free allocated memory after use
      |     ^~~~~~~~~~~~~
[3/8] Linking C static library esp-idf/main/libmain.a
[4/8] Generating ld/sections.ld
[5/8] Linking CXX executable HTTP_ECHO_SERVER.elf
[6/8] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated /home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/build/HTTP_ECHO_SERVER.bin
[7/8] cd "/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/build/esp-idf/esptool_py" && /home/dnk120/.espressif/python_env/idf5.4_py3.10_env/bin/python /home/dnk120/esp/esp-idf-release-v5.3/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/dnk120/Desktop/milan/trainning/esp32/esp\ trainning/http/http_echo_server/build/partition_table/partition-table.bin /home/dnk120/Desktop/milan/trainning/esp32/esp\ trainning/http/http_echo_server/build/HTTP_ECHO_SERVER.bin
HTTP_ECHO_SERVER.bin binary size 0xcd380 bytes. Smallest app partition is 0x100000 bytes. 0x32c80 bytes (20%) free.
[7/8] cd /home/dnk120/esp/esp-idf-release-v5.3/components/esptool_py && /home/dnk120/.espressif/tools/cmake/3.24.0/bin/cmake -D IDF_PATH=/home/dnk120/esp/esp-idf-release-v5.3 -D "SERIAL_TOOL=/home/dnk120/.espressif/python_env/idf5.4_py3.10_env/bin/python;;/home/dnk120/esp/esp-idf-release-v5.3/components/esptool_py/esptool/esptool.py;--chip;esp32s3" -D "SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args" -D "WORKING_DIRECTORY=/home/dnk120/Desktop/milan/trainning/esp32/esp trainning/http/http_echo_server/build" -P /home/dnk120/esp/esp-idf-release-v5.3/components/esptool_py/run_serial_tool.cmake
esptool.py --chip esp32s3 -p /dev/ttyUSB0 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 2MB 0x0 bootloader/bootloader.bin 0x10000 HTTP_ECHO_SERVER.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.8.1
Serial port /dev/ttyUSB0
Connecting....
Chip is ESP32-S3 (QFN56) (revision v0.1)
Features: WiFi, BLE, Embedded PSRAM 8MB (AP_1v8)
Crystal is 40MHz
MAC: 68:b6:b3:3e:16:3c
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00000000 to 0x00005fff...
Flash will be erased from 0x00010000 to 0x000ddfff...
Flash will be erased from 0x00008000 to 0x00008fff...
SHA digest in image updated
Compressed 21776 bytes to 13446...
Writing at 0x00000000... (100 %)
Wrote 21776 bytes (13446 compressed) at 0x00000000 in 0.6 seconds (effective 286.4 kbit/s)...
Hash of data verified.
Compressed 840576 bytes to 524749...
Writing at 0x00010000... (3 %)
Writing at 0x0001d0ec... (6 %)
Writing at 0x000259c0... (9 %)
Writing at 0x0002a68a... (12 %)
Writing at 0x00034550... (15 %)
Writing at 0x0003c895... (18 %)
Writing at 0x00042b8b... (21 %)
Writing at 0x00048f34... (24 %)
Writing at 0x0004f827... (27 %)
Writing at 0x00055767... (30 %)
Writing at 0x0005b698... (33 %)
Writing at 0x0006132c... (36 %)
Writing at 0x000676ba... (39 %)
Writing at 0x0006c517... (42 %)
Writing at 0x0007174d... (45 %)
Writing at 0x00076626... (48 %)
Writing at 0x0007ba1a... (51 %)
Writing at 0x00080d58... (54 %)
Writing at 0x0008639a... (57 %)
Writing at 0x0008c11c... (60 %)
Writing at 0x0009198e... (63 %)
Writing at 0x000975a9... (66 %)
Writing at 0x0009d389... (69 %)
Writing at 0x000a2b57... (72 %)
Writing at 0x000a8934... (75 %)
